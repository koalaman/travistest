language: shell
os: linux

services:
  - docker

jobs:
  include:
    - stage: Package Source
      script:
        # Don't bother installing GHC just to package the source
        - sudo apt-mark manual ghc
        - sudo apt-get install cabal-install
        - cabal sdist --builddir=dist
        - mkdir -p source
        - mv dist/*.tar.gz source/source.tar.gz
      workspaces:
        create:
          name: ws-source
          paths: source

    - stage: Build
      env: BUILD=darwin.x86_64
      workspaces:
        create:
          name: ws-darwin.x86_64
          paths: bin
        use:
          - ws-source

      # This must weirdly not have a dash, otherwise an empty job is created
#      env: BUILD=linux.x86_64
#      workspaces:
#        create:
#          name: ws-linux.x86_64
#          paths: bin
#        use:
#          - ws-source
#    - env: BUILD=windows.x86_64
#      workspaces:
#        create:
#          name: ws-windows.x86_64
#          paths: bin
#        use:
#          - ws-source
#    - env: BUILD=linux.armv6hf
#      workspaces:
#        create:
#          name: ws-linux.armv6hf
#          paths: bin
#        use:
#          - ws-source
#    - env: BUILD=linux.aarch64
#      workspaces:
#        create:
#          name: ws-linux.aarch64
#          paths: bin
#        use:
#          - ws-source
#    - env: BUILD=darwin.x86_64
#      workspaces:
#        create:
#          name: ws-darwin.x86_64
#          paths: bin
#        use:
#          - ws-source

    - stage: Package Binaries
      script:
        - find . || true
        - mkdir -p deploy
        - cp -r bin/* deploy
        - cd deploy && ../.prepare_deploy
      workspaces:
        use:
#          - ws-linux.x86_64
#          - ws-linux.armv6hf
#          - ws-linux.aarch64
           - ws-darwin.x86_64
#          - ws-windows.x86_64
        create:
          name: ws-deploy
          paths: deploy

    - stage: Upload Artifacts to GitHub
      workspaces:
        use:
          - ws-deploy
      script:
        - ./.github_deploy

    - stage: Deploy docker image
      # Deploy only for pushes to master branch, not other branches, not PRs.
      if: type = push
      script:
        - source ./.multi_arch_docker
        - set -ex; multi_arch_docker::main; set +x

# This is in global context and runs for every stage that doesn't override it.
before_install: |
  DOCKER_BASE="$DOCKER_USERNAME/shellcheck"
  DOCKER_BUILDS=""
  export TAGS=""
  test "$TRAVIS_BRANCH" = master && TAGS="$TAGS latest" || true
  test -n "$TRAVIS_TAG"          && TAGS="$TAGS stable $TRAVIS_TAG" || true
  echo "Tags are $TAGS"

# This is in global context and runs for every stage that doesn't override it.
script:
  - mkdir -p bin
  - ( cd bin && ../build/run_builder ../source/source.tar.gz ../build/$BUILD ) && find .

# This is in global context and runs for every stage that doesn't override it.
after_failure: |
  id
  pwd
  df -h
  find . -name '*.log' -type f -exec grep "" /dev/null {} +
  find . -ls

